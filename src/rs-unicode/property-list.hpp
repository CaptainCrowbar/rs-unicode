// This file is automatically generated
// Do not edit
// Do not include this file directly
// Include "rs-unicode/character.hpp" instead

#include "rs-unicode/property-map.hpp"
#include <array>
#include <string_view>

namespace RS::Unicode {

    enum class East_Asian_Width: unsigned char {
        N,
        A,
        F,
        H,
        Na,
        W,
    };

    enum class General_Category: unsigned char {
        Cn,
        Cc,
        Cf,
        Co,
        Cs,
        Ll,
        Lm,
        Lo,
        Lt,
        Lu,
        Mc,
        Me,
        Mn,
        Nd,
        Nl,
        No,
        Pc,
        Pd,
        Pe,
        Pf,
        Pi,
        Po,
        Ps,
        Sc,
        Sk,
        Sm,
        So,
        Zl,
        Zp,
        Zs,
    };

    enum class Grapheme_Cluster_Break: unsigned char {
        Other,
        CR,
        Control,
        Extend,
        L,
        LF,
        LV,
        LVT,
        Prepend,
        Regional_Indicator,
        SpacingMark,
        T,
        V,
        ZWJ,
    };

    enum class Indic_Conjunct_Break: unsigned char {
        None,
        Case_Ignorable,
        Consonant,
        Default_Ignorable_Code_Point,
        Extend,
        Grapheme_Base,
        Grapheme_Extend,
        Grapheme_Link,
        Linker,
    };

    enum class Line_Break: unsigned char {
        XX,
        AI,
        AK,
        AL,
        AP,
        AS,
        B2,
        BA,
        BB,
        BK,
        CB,
        CJ,
        CL,
        CM,
        CP,
        CR,
        EB,
        EM,
        EX,
        GL,
        H2,
        H3,
        HL,
        HY,
        ID,
        IN,
        IS,
        JL,
        JT,
        JV,
        LF,
        NL,
        NS,
        NU,
        OP,
        PO,
        PR,
        QU,
        RI,
        SA,
        SG,
        SP,
        SY,
        VF,
        VI,
        WJ,
        ZW,
        ZWJ,
    };

    int canonical_combining_class(char32_t c);
    std::u32string_view canonical_decomposition_mapping(char32_t c);
    East_Asian_Width east_asian_width(char32_t c);
    General_Category general_category(char32_t c);
    Grapheme_Cluster_Break grapheme_cluster_break(char32_t c);
    Indic_Conjunct_Break indic_conjunct_break(char32_t c);
    Line_Break line_break(char32_t c);
    char32_t simple_lowercase_mapping(char32_t c);
    char32_t simple_titlecase_mapping(char32_t c);
    char32_t simple_uppercase_mapping(char32_t c);

    bool is_default_ignorable(char32_t c);
    bool is_extended_pictographic(char32_t c);
    bool is_full_composition_exclusion(char32_t c);
    bool is_pattern_syntax(char32_t c);
    bool is_pattern_white_space(char32_t c);
    bool is_white_space(char32_t c);
    bool is_xid_continue(char32_t c);
    bool is_xid_start(char32_t c);

    char32_t canonical_composition_mapping(std::u32string_view str);
    std::u32string_view case_folding(char32_t c);
    const std::array<std::u32string_view, 3>& special_casing(char32_t c);

    inline char primary_category(char32_t c) {
        auto index = static_cast<unsigned>(general_category(c));
        return "CCCCCLLLLLMMMNNNPPPPPPPSSSSZZZ"[index];
    }

}
