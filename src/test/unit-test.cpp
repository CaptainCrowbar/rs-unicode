// This file is generated by the discover-tests script

#include "rs-core/unit-test.hpp"
#include <print>
#include <string>
#include <vector>

using namespace RS::UnitTest;

void test_rs_unicode_character_properties_general_category();
void test_rs_unicode_character_properties_caonical_combining_class();
void test_rs_unicode_character_properties_canonical_decomposition_mapping();
void test_rs_unicode_character_properties_east_asian_width();
void test_rs_unicode_character_properties_grapheme_cluster_break();
void test_rs_unicode_character_properties_simple_lowercase_mapping();
void test_rs_unicode_character_properties_simple_titlecase_mapping();
void test_rs_unicode_character_properties_simple_uppercase_mapping();
void test_rs_unicode_character_properties_full_composition_exclusion();
void test_rs_unicode_character_properties_extended_pictographic();
void test_rs_unicode_character_properties_pattern_syntax();
void test_rs_unicode_character_properties_noncharacter();
void test_rs_unicode_character_properties_private_use();
void test_rs_unicode_character_properties_subscripts_and_superscripts();
void test_rs_unicode_character_properties_identifiers();
void test_rs_unicode_encoding_decode_utf8_characters();
void test_rs_unicode_encoding_encode_utf8_characters();
void test_rs_unicode_encoding_decode_utf16_characters();
void test_rs_unicode_encoding_encode_utf16_characters();
void test_rs_unicode_encoding_append_utf8();
void test_rs_unicode_encoding_utf8_error_check();
void test_rs_unicode_encoding_utf16_error_check();
void test_rs_unicode_encoding_utf32_error_check();
void test_rs_unicode_encoding_utf8_to_utf32();
void test_rs_unicode_encoding_utf16_to_utf32();
void test_rs_unicode_encoding_utf32_to_utf8();
void test_rs_unicode_encoding_utf32_to_utf16();
void test_rs_unicode_encoding_detail_hex_string();
void test_rs_unicode_encoding_utf8_code_units();
void test_rs_unicode_encoding_utf8_length();
void test_rs_unicode_encoding_utf16_code_units();
void test_rs_unicode_encoding_utf16_length();
void test_rs_unicode_encoding_decoded_utf8_iterators();
void test_rs_unicode_encoding_encoded_utf8_iterators();
void test_rs_unicode_legacy_conversion();
void test_rs_unicode_binary_property_map();
void test_rs_unicode_general_property_map();
void test_rs_unicode_regex_pcre_version();
void test_rs_unicode_regex_match();
void test_rs_unicode_regex_flags();
void test_rs_unicode_regex_grep();
void test_rs_unicode_regex_split();
void test_rs_unicode_regex_format();
void test_rs_unicode_regex_transform();
void test_rs_unicode_regex_dfa();
void test_rs_unicode_string_casing_to_lowercase();
void test_rs_unicode_string_casing_to_uppercase();
void test_rs_unicode_string_casing_to_titlecase();
void test_rs_unicode_string_casing_to_casefold();
void test_rs_unicode_string_subscripts_and_superscripts();
void test_rs_unicode_iterators_grapheme_view();
void test_rs_unicode_iterators_split_view();
void test_rs_unicode_iterators_split_vector();
void test_rs_unicode_string_literals();
void test_rs_unicode_string_manipulation_concepts();
void test_rs_unicode_string_manipulation_cat();
void test_rs_unicode_string_manipulation_join();
void test_rs_unicode_string_manipulation_padding();
void test_rs_unicode_string_manipulation_partition();
void test_rs_unicode_string_manipulation_repeat();
void test_rs_unicode_string_manipulation_replace();
void test_rs_unicode_string_manipulation_trim();
void test_rs_unicode_string_manipulation_word_wrap();
void test_rs_unicode_string_properties_utf8_length();
void test_rs_unicode_string_properties_utf16_length();
void test_rs_unicode_string_properties_utf32_length();
void test_rs_unicode_string_properties_grapheme_length();
void test_rs_unicode_string_properties_column_length();
void test_rs_unicode_string_properties_wide_column_length();
void test_rs_unicode_string_properties_line_and_column();
void test_rs_unicode_string_search_find_first_of();
void test_rs_unicode_string_search_find_first_not_of();
void test_rs_unicode_string_search_find_last_of();
void test_rs_unicode_string_search_find_last_not_of();
void test_rs_unicode_string_grapheme_breaks();
void test_rs_unicode_string_normalization();
void test_rs_unicode_version();

int main(int argc, char** argv) {

    main_args = std::vector<std::string>(argv + 1, argv + argc);
    std::println("");
    std::println("{}Running unit tests{}", xhead, xreset);
    std::println("{}{}{}", xrule, rule, xreset);

    call_me_maybe(test_rs_unicode_character_properties_general_category, "test_rs_unicode_character_properties_general_category");
    call_me_maybe(test_rs_unicode_character_properties_caonical_combining_class, "test_rs_unicode_character_properties_caonical_combining_class");
    call_me_maybe(test_rs_unicode_character_properties_canonical_decomposition_mapping, "test_rs_unicode_character_properties_canonical_decomposition_mapping");
    call_me_maybe(test_rs_unicode_character_properties_east_asian_width, "test_rs_unicode_character_properties_east_asian_width");
    call_me_maybe(test_rs_unicode_character_properties_grapheme_cluster_break, "test_rs_unicode_character_properties_grapheme_cluster_break");
    call_me_maybe(test_rs_unicode_character_properties_simple_lowercase_mapping, "test_rs_unicode_character_properties_simple_lowercase_mapping");
    call_me_maybe(test_rs_unicode_character_properties_simple_titlecase_mapping, "test_rs_unicode_character_properties_simple_titlecase_mapping");
    call_me_maybe(test_rs_unicode_character_properties_simple_uppercase_mapping, "test_rs_unicode_character_properties_simple_uppercase_mapping");
    call_me_maybe(test_rs_unicode_character_properties_full_composition_exclusion, "test_rs_unicode_character_properties_full_composition_exclusion");
    call_me_maybe(test_rs_unicode_character_properties_extended_pictographic, "test_rs_unicode_character_properties_extended_pictographic");
    call_me_maybe(test_rs_unicode_character_properties_pattern_syntax, "test_rs_unicode_character_properties_pattern_syntax");
    call_me_maybe(test_rs_unicode_character_properties_noncharacter, "test_rs_unicode_character_properties_noncharacter");
    call_me_maybe(test_rs_unicode_character_properties_private_use, "test_rs_unicode_character_properties_private_use");
    call_me_maybe(test_rs_unicode_character_properties_subscripts_and_superscripts, "test_rs_unicode_character_properties_subscripts_and_superscripts");
    call_me_maybe(test_rs_unicode_character_properties_identifiers, "test_rs_unicode_character_properties_identifiers");
    call_me_maybe(test_rs_unicode_encoding_decode_utf8_characters, "test_rs_unicode_encoding_decode_utf8_characters");
    call_me_maybe(test_rs_unicode_encoding_encode_utf8_characters, "test_rs_unicode_encoding_encode_utf8_characters");
    call_me_maybe(test_rs_unicode_encoding_decode_utf16_characters, "test_rs_unicode_encoding_decode_utf16_characters");
    call_me_maybe(test_rs_unicode_encoding_encode_utf16_characters, "test_rs_unicode_encoding_encode_utf16_characters");
    call_me_maybe(test_rs_unicode_encoding_append_utf8, "test_rs_unicode_encoding_append_utf8");
    call_me_maybe(test_rs_unicode_encoding_utf8_error_check, "test_rs_unicode_encoding_utf8_error_check");
    call_me_maybe(test_rs_unicode_encoding_utf16_error_check, "test_rs_unicode_encoding_utf16_error_check");
    call_me_maybe(test_rs_unicode_encoding_utf32_error_check, "test_rs_unicode_encoding_utf32_error_check");
    call_me_maybe(test_rs_unicode_encoding_utf8_to_utf32, "test_rs_unicode_encoding_utf8_to_utf32");
    call_me_maybe(test_rs_unicode_encoding_utf16_to_utf32, "test_rs_unicode_encoding_utf16_to_utf32");
    call_me_maybe(test_rs_unicode_encoding_utf32_to_utf8, "test_rs_unicode_encoding_utf32_to_utf8");
    call_me_maybe(test_rs_unicode_encoding_utf32_to_utf16, "test_rs_unicode_encoding_utf32_to_utf16");
    call_me_maybe(test_rs_unicode_encoding_detail_hex_string, "test_rs_unicode_encoding_detail_hex_string");
    call_me_maybe(test_rs_unicode_encoding_utf8_code_units, "test_rs_unicode_encoding_utf8_code_units");
    call_me_maybe(test_rs_unicode_encoding_utf8_length, "test_rs_unicode_encoding_utf8_length");
    call_me_maybe(test_rs_unicode_encoding_utf16_code_units, "test_rs_unicode_encoding_utf16_code_units");
    call_me_maybe(test_rs_unicode_encoding_utf16_length, "test_rs_unicode_encoding_utf16_length");
    call_me_maybe(test_rs_unicode_encoding_decoded_utf8_iterators, "test_rs_unicode_encoding_decoded_utf8_iterators");
    call_me_maybe(test_rs_unicode_encoding_encoded_utf8_iterators, "test_rs_unicode_encoding_encoded_utf8_iterators");
    call_me_maybe(test_rs_unicode_legacy_conversion, "test_rs_unicode_legacy_conversion");
    call_me_maybe(test_rs_unicode_binary_property_map, "test_rs_unicode_binary_property_map");
    call_me_maybe(test_rs_unicode_general_property_map, "test_rs_unicode_general_property_map");
    call_me_maybe(test_rs_unicode_regex_pcre_version, "test_rs_unicode_regex_pcre_version");
    call_me_maybe(test_rs_unicode_regex_match, "test_rs_unicode_regex_match");
    call_me_maybe(test_rs_unicode_regex_flags, "test_rs_unicode_regex_flags");
    call_me_maybe(test_rs_unicode_regex_grep, "test_rs_unicode_regex_grep");
    call_me_maybe(test_rs_unicode_regex_split, "test_rs_unicode_regex_split");
    call_me_maybe(test_rs_unicode_regex_format, "test_rs_unicode_regex_format");
    call_me_maybe(test_rs_unicode_regex_transform, "test_rs_unicode_regex_transform");
    call_me_maybe(test_rs_unicode_regex_dfa, "test_rs_unicode_regex_dfa");
    call_me_maybe(test_rs_unicode_string_casing_to_lowercase, "test_rs_unicode_string_casing_to_lowercase");
    call_me_maybe(test_rs_unicode_string_casing_to_uppercase, "test_rs_unicode_string_casing_to_uppercase");
    call_me_maybe(test_rs_unicode_string_casing_to_titlecase, "test_rs_unicode_string_casing_to_titlecase");
    call_me_maybe(test_rs_unicode_string_casing_to_casefold, "test_rs_unicode_string_casing_to_casefold");
    call_me_maybe(test_rs_unicode_string_subscripts_and_superscripts, "test_rs_unicode_string_subscripts_and_superscripts");
    call_me_maybe(test_rs_unicode_iterators_grapheme_view, "test_rs_unicode_iterators_grapheme_view");
    call_me_maybe(test_rs_unicode_iterators_split_view, "test_rs_unicode_iterators_split_view");
    call_me_maybe(test_rs_unicode_iterators_split_vector, "test_rs_unicode_iterators_split_vector");
    call_me_maybe(test_rs_unicode_string_literals, "test_rs_unicode_string_literals");
    call_me_maybe(test_rs_unicode_string_manipulation_concepts, "test_rs_unicode_string_manipulation_concepts");
    call_me_maybe(test_rs_unicode_string_manipulation_cat, "test_rs_unicode_string_manipulation_cat");
    call_me_maybe(test_rs_unicode_string_manipulation_join, "test_rs_unicode_string_manipulation_join");
    call_me_maybe(test_rs_unicode_string_manipulation_padding, "test_rs_unicode_string_manipulation_padding");
    call_me_maybe(test_rs_unicode_string_manipulation_partition, "test_rs_unicode_string_manipulation_partition");
    call_me_maybe(test_rs_unicode_string_manipulation_repeat, "test_rs_unicode_string_manipulation_repeat");
    call_me_maybe(test_rs_unicode_string_manipulation_replace, "test_rs_unicode_string_manipulation_replace");
    call_me_maybe(test_rs_unicode_string_manipulation_trim, "test_rs_unicode_string_manipulation_trim");
    call_me_maybe(test_rs_unicode_string_manipulation_word_wrap, "test_rs_unicode_string_manipulation_word_wrap");
    call_me_maybe(test_rs_unicode_string_properties_utf8_length, "test_rs_unicode_string_properties_utf8_length");
    call_me_maybe(test_rs_unicode_string_properties_utf16_length, "test_rs_unicode_string_properties_utf16_length");
    call_me_maybe(test_rs_unicode_string_properties_utf32_length, "test_rs_unicode_string_properties_utf32_length");
    call_me_maybe(test_rs_unicode_string_properties_grapheme_length, "test_rs_unicode_string_properties_grapheme_length");
    call_me_maybe(test_rs_unicode_string_properties_column_length, "test_rs_unicode_string_properties_column_length");
    call_me_maybe(test_rs_unicode_string_properties_wide_column_length, "test_rs_unicode_string_properties_wide_column_length");
    call_me_maybe(test_rs_unicode_string_properties_line_and_column, "test_rs_unicode_string_properties_line_and_column");
    call_me_maybe(test_rs_unicode_string_search_find_first_of, "test_rs_unicode_string_search_find_first_of");
    call_me_maybe(test_rs_unicode_string_search_find_first_not_of, "test_rs_unicode_string_search_find_first_not_of");
    call_me_maybe(test_rs_unicode_string_search_find_last_of, "test_rs_unicode_string_search_find_last_of");
    call_me_maybe(test_rs_unicode_string_search_find_last_not_of, "test_rs_unicode_string_search_find_last_not_of");
    call_me_maybe(test_rs_unicode_string_grapheme_breaks, "test_rs_unicode_string_grapheme_breaks");
    call_me_maybe(test_rs_unicode_string_normalization, "test_rs_unicode_string_normalization");
    call_me_maybe(test_rs_unicode_version, "test_rs_unicode_version");

    std::println("{}{}{}", xrule, rule, xreset);

    if (failures == 0) {
        std::println("{}OK - all tests passed{}", xpass, xreset);
    } else {
        std::println("{}*** Test failures: {}{}", xfail, failures, xreset);
    }

    std::println("");

    return failures;

}
